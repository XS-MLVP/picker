name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm]
    runs-on: ${{ matrix.os }}
    env:
      VERIBLE_VERSION: v0.0-4007-g98bdb38a
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake ninja-build pkg-config \
            python3 python3-pip python3-venv libpython3-dev \
            git curl wget ca-certificates swig \
            default-jdk \
            verilator

      - name: Install Verible (format + syntax)
        run: |
          ARCH=x86_64
          wget "https://github.com/chipsalliance/verible/releases/download/${VERIBLE_VERSION}/verible-${VERIBLE_VERSION}-linux-static-${ARCH}.tar.gz" -O /tmp/verible.tar.gz
          tar -xzf /tmp/verible.tar.gz -C /tmp
          sudo cp /tmp/verible-${VERIBLE_VERSION}/bin/* /usr/local/bin/
          verible-verilog-format --version || true
          verible-verilog-syntax --version || true

      - name: Build
        run: |
          make -j"$(nproc)"

      - name: Unit test (test_picker_utils)
        run: |
          cmake . -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_BUILD_PARALLEL="$(nproc)"
          cmake --build build --target test_picker_utils -j"$(nproc)"
          ./build/bin/test_picker_utils

      - name: Smoke tests
        run: |
          make -C test smoke

      - name: Full tests (make -C test all)
        run: |
          make -C test all -j"$(nproc)"

      - name: Cleanup generated artifacts
        if: always()
        run: |
          make -C test clean || true
          rm -f test_params.txt test_io.txt || true

      - name: Upload build directory
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-builddir
          path: build

  appimage-build:
    needs: build-and-test
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install AppImage dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends swig
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
            ARCH="aarch64"
          fi
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-${ARCH}.AppImage
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-${ARCH}.AppImage
          chmod +x appimagetool-${ARCH}.AppImage
          sudo mv appimagetool-${ARCH}.AppImage /usr/bin/appimagetool
          chmod +x linuxdeploy-${ARCH}.AppImage
          sudo mv linuxdeploy-${ARCH}.AppImage /usr/bin/linuxdeploy

      - name: Download build directory artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-builddir
          path: build

      - name: Build AppImage (reuse build dir)
        run: |
          make appimage

      - name: Upload AppImage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-appimage
          path: '*.AppImage'

  appimage-publish:
    needs: appimage-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download AppImage
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: appimages

      - name: Generate release tag
        id: tag_vars
        run: |
          DATE=$(date +'%Y%m%d')
          SHORT_SHA=${GITHUB_SHA::6}
          echo "TAG_NAME=$DATE-$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Create AppImage release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            appimages/*.AppImage
          tag_name: ${{ steps.tag_vars.outputs.TAG_NAME }}
          name:    Picker AppImage ${{ steps.tag_vars.outputs.TAG_NAME }}
          body: |
            This is the AppImage release for Picker.
            It includes the latest changes and features.
          target_commitish: ${{ github.sha }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.ref == 'refs/heads/master'
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: xs-mlvp/picker
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
