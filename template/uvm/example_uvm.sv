//==============================================================================//
// File       : example_uvm.sv
// Author     : automatically generated by picker
// Date       : {{datenow}}
// Description: This is an example of using the picker with UVM. 
//              In this example, data is generated in example_env, received and 
//              encapsulated into transaction by example_monitor, then sent to 
//              Python via xspcomm. example_driver receives data from Python. 
//              example_scoreboard compares the data sent and received by UVM to 
//              ensure consistency. 
//              To use the picker, you need to create a new monitor and driver, 
//              extends from picker-generated xxxdriver and xxxmonitor classes. 
//              Then override the transaction_sub and transaction_pub methods in 
//              these new classes.
// Version    : {{version}}
//==============================================================================//
import uvm_pkg::*;
import uvmc_pkg::*;
`include "../../{{filepath}}"
`include "../{{className}}_xagent.sv"

interface example_interface(input clk, input rst_n);
    int data;
    logic valid;
    
endinterface //example_interface


class example_monitor extends {{className}}_xmonitor;
    `uvm_component_utils(example_monitor) 
    uvm_analysis_port #({{className}}) ap;
    virtual example_interface          vif;
    {{className}} newtr;

    function new (string name = "example_monitor" , uvm_component parent = null);
        super.new(name,parent);
        ap  = new("ap",this);
    endfunction

    function void build_phase(uvm_phase phase);
        if(!uvm_config_db#(virtual example_interface)::get(this, "", "vif", vif))
            `uvm_fatal("example_env","virtual_interface must be set for vif!!!")
    endfunction

    task sequence_send({{className}} tr);
        @(posedge vif.clk iff(vif.valid));
        newtr = new("newtr");
        tr.randomize();
        ap.write(tr);
        `uvm_info("example_monitor", $sformatf("uvm send sequence: \n%s",tr.sprint()), UVM_LOW)  
        endtask
endclass


class example_driver extends {{className}}_xdriver;
    `uvm_component_utils(example_driver);
    uvm_analysis_port #({{className}}) ap;
    
    function new (string name = "example_driver", uvm_component parent = null);
        super.new(name,parent);
    endfunction

    virtual function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        ap = new("ap",this);      
    endfunction

    function sequence_receive({{className}} tr);
        ap.write(tr);
        `uvm_info("example_driver", $sformatf("uvm pub message: \n%s",tr.sprint()), UVM_LOW)
    endfunction
endclass

// get uvm publish and subscribe transaction from port and put them in queue 
// finally in post_main_phase compare this
class example_scoreboard extends uvm_scoreboard;
    `uvm_component_utils(example_scoreboard)
    {{className}} pub_queue[$];
    {{className}} sub_queue[$];
    uvm_blocking_get_port #({{className}}) subscribe_port;
    uvm_blocking_get_port #({{className}}) publish_port;
    function new (string name = "example_scoreboard", uvm_component parent = null);
        super.new(name, parent);
    endfunction

    // initial scoreboard component and data port
    virtual function void build_phase(uvm_phase phase);
        super.build_phase(phase);
        subscribe_port = new("subscribe_port", this);
        publish_port = new("publish_port", this);
    endfunction : build_phase

    // get transaction from port and then push it to queue
    virtual task main_phase(uvm_phase phase);
        {{className}} get_sub, get_pub;
        fork
        while (1) begin
            subscribe_port.get(get_sub);
            sub_queue.push_back(get_sub);
        end
        while (1) begin
            publish_port.get(get_pub);
            pub_queue.push_back(get_pub);
        end
        join
    endtask
    
    // get transaction from queue, then compare the transaction published by UVM with the subscribed transaction
    virtual task post_main_phase(uvm_phase phase);
        {{className}} pub_tmp,sub_tmp;
        while(pub_queue.size() > 0) begin
            sub_tmp = sub_queue.pop_front();
            pub_tmp = pub_queue.pop_front();
            if(sub_tmp.compare(pub_tmp))begin
                `uvm_info("example_scoreboard", $sformatf("compare SUCCESS \npython sub data is \n%s python pub data is \n%s",sub_tmp.sprint(), pub_tmp.sprint()), UVM_NONE)
            end
            else begin
                `uvm_info("example_scoreboard", $sformatf("compare FAIL \npython sub data is \n%s python pub data is \n%s",sub_tmp.sprint(), pub_tmp.sprint()), UVM_NONE)
            end
        end
    endtask
endclass

    // initialize xagent and configure its parameters 
class example_env extends uvm_env;
    `uvm_component_utils(example_env)
    {{className}}_xagent                    xagent;
    example_monitor                          mon;
    virtual example_interface                vif;
    example_driver                           drv;
    example_scoreboard                       scb;
    {{className}}_xagent_config              xagt_cfg;
    uvm_tlm_analysis_fifo #({{className}})   sub_fifo;
    uvm_tlm_analysis_fifo #({{className}})   pub_fifo;

    // initial parameters
    function new (string name = "example_env" , uvm_component parent = null);
        super.new(name,parent);
        xagt_cfg = new("xagt_cfg");
        xagt_cfg.mon_type = example_monitor::get_type();
        xagt_cfg.drv_type = example_driver::get_type();
        uvm_config_db#({{className}}_xagent_config)::set(null, "", "{{className}}_xagent_config", xagt_cfg);
    endfunction

    // initial env component and component
    function void build_phase (uvm_phase phase);
        super.build_phase(phase);
        sub_fifo = new("sub_fifo",this);
        pub_fifo = new("pub_fifo",this);
        xagent = {{className}}_xagent::type_id::create("xagent",this);
        scb = example_scoreboard::type_id::create("scb",this);
        if(!uvm_config_db#(virtual example_interface)::get(this,"", "vif", vif))
            `uvm_fatal("example_env","virtual_interface must be set for vif!!!")
    endfunction

    function void connect_phase (uvm_phase phase);
        // if your driver/monitor contain a port you need to cast xagent.{{className}}_xmon to your monitor
        $cast(mon,xagent.{{className}}_xmon);
        scb.subscribe_port.connect(sub_fifo.blocking_get_export);
        mon.ap.connect(sub_fifo.analysis_export);
        $cast(drv,xagent.{{className}}_xdrv);
        scb.publish_port.connect(pub_fifo.blocking_get_export);
        drv.ap.connect(pub_fifo.analysis_export);
    endfunction

    virtual task main_phase(uvm_phase phase);
        phase.raise_objection(this);
        for (int i = 0; i < 20; i++) begin
            @(posedge vif.clk)
            vif.data <= i;
            vif.valid <= 1'b1;

            @(posedge vif.clk);
            vif.valid <= 1'b0;
        end
        #10
        phase.drop_objection(this);
    endtask
endclass


class example_test extends uvm_test;
    `uvm_component_utils(example_test)
    example_env env;

    function new (string name = "example_test", uvm_component parent = null);
        super.new(name, parent);
    endfunction

    function void build_phase (uvm_phase phase);
        super.build_phase(phase);
        env = example_env::type_id::create("example_env",this);
    endfunction
endclass


module sv_main;
    logic clk;
    logic rst_n;
    example_interface vif(clk,rst_n);
    initial begin
        clk = 0;
        forever begin
            #2
            clk <= ~clk;
        end
    end
    initial begin
        rst_n <= 1'b0;
        #10
        rst_n <= 1'b1;
    end
    initial begin
        uvm_config_db #(virtual example_interface )::set(null,"uvm_test_top.example_env", "vif",vif);
        uvm_config_db #(virtual example_interface )::set(null,"uvm_test_top.example_env.xagent.{{className}}_sub", "vif",vif);
        run_test("example_test");
    end
endmodule

